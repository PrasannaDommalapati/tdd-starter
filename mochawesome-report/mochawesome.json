{
  "stats": {
    "suites": 1,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2018-10-15T11:31:34.496Z",
    "end": "2018-10-15T11:31:35.159Z",
    "duration": 663,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "b53f1f34-9227-4065-84e8-e1d6e5412c49",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "afab1593-b298-431e-ae26-9aa4729841de",
        "title": "Project Euler",
        "fullFile": "/Users/prasanna/Documents/repos/tdd-practice/test/project-euler.spec.js",
        "file": "/test/project-euler.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should add the numbers",
            "fullTitle": "Project Euler should add the numbers",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var num1 = faker.random.number(100),\n    num2 = faker.random.number(100);\nvar sum = math.sum(num1, num2);\n(0, _chai.expect)(sum).to.equal(num1 + num2);",
            "err": {},
            "isRoot": false,
            "uuid": "c955ac2d-0883-48f2-a8ea-83206c78f04f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should return the sum of multiples 3 or 5",
            "fullTitle": "Project Euler it should return the sum of multiples 3 or 5",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)(math.multiple3or5(10)).to.equal(33);",
            "err": {},
            "isRoot": false,
            "uuid": "b339c464-905f-4caf-81ec-458963518164",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "is multiple of three?",
            "fullTitle": "Project Euler is multiple of three?",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)(math.isMultipleOfThree(6)).to.be.true;\n(0, _chai.expect)(math.isMultipleOfThree(5)).to.be.false;",
            "err": {},
            "isRoot": false,
            "uuid": "f1ea902e-5737-4d57-94a6-69c54f78c5d0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "is the smallest number divisible by 1-20",
            "fullTitle": "Project Euler is the smallest number divisible by 1-20",
            "timedOut": false,
            "duration": 626,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)(math.divisibleByOneToTwenty(20)).to.be.equal(232792560);",
            "err": {},
            "isRoot": false,
            "uuid": "7e07775b-2674-4102-92c6-83c7da19eadc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should give the sum of two lowest numbers of array",
            "fullTitle": "Project Euler should give the sum of two lowest numbers of array",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)(math.sumOfLowestIntegers([5, 8, 12, 19, 22])).to.be.equal(13);\n(0, _chai.expect)(math.sumOfLowestIntegers([15, 28, 4, 2, 43])).to.be.equal(6);\n(0, _chai.expect)(math.sumOfLowestIntegers([3, 87, 45, 12, 7])).to.be.equal(10);",
            "err": {},
            "isRoot": false,
            "uuid": "041a9c8c-05b3-4b51-8a16-d58c652a07a2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return longest",
            "fullTitle": "Project Euler should return longest",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)(math.twoToOne('aretheyhere', 'yestheyarehere')).to.be.equal('aehrsty');\n(0, _chai.expect)(math.twoToOne('loopingisfunbutdangerous', 'lessdangerousthancoding')).to.be.equal('abcdefghilnoprstu');",
            "err": {},
            "isRoot": false,
            "uuid": "822bb736-49b7-421e-b806-609f64a56b5c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return the vowel count",
            "fullTitle": "Project Euler should return the vowel count",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)(math.vowelCount('abracadabra')).to.be.equal(5);",
            "err": {},
            "isRoot": false,
            "uuid": "77ed8fe4-e6a9-4004-8d4b-397b978e3342",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return the consonant count",
            "fullTitle": "Project Euler should return the consonant count",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)(math.consonantCount('abracadabra')).to.be.equal(6);",
            "err": {},
            "isRoot": false,
            "uuid": "61914a38-27e6-447f-8364-73ef2ef1671e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should test a string has same number of x  and o",
            "fullTitle": "Project Euler should test a string has same number of x  and o",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)(math.xoCount('xo')).to.be.true;\n(0, _chai.expect)(math.xoCount('xxOo')).to.be.true;\n(0, _chai.expect)(math.xoCount('xxxm')).to.be.false;\n(0, _chai.expect)(math.xoCount('Oo')).to.be.false;\n(0, _chai.expect)(math.xoCount('ooom')).to.be.false;",
            "err": {},
            "isRoot": false,
            "uuid": "6705afb2-fc31-4b7b-ad6b-38b796e27346",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should remove the minimum or smallest value of an array",
            "fullTitle": "Project Euler should remove the minimum or smallest value of an array",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)(math.removeSmallest([1, 2, 3, 4, 5])).to.deep.equal([2, 3, 4, 5]);\n(0, _chai.expect)(math.removeSmallest([5, 3, 2, 1, 4])).to.deep.equal([5, 3, 2, 4]);\n(0, _chai.expect)(math.removeSmallest([2, 2, 1, 2, 1])).to.deep.equal([2, 2, 2, 1]);\n(0, _chai.expect)(math.removeSmallest([])).to.deep.equal([]);",
            "err": {},
            "isRoot": false,
            "uuid": "803613fc-b483-429e-8993-6d4eb0f07340",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return friend or foe",
            "fullTitle": "Project Euler should return friend or foe",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)(math.friendOrFoe([\"Ryan\", \"Kieran\", \"Mark\"])).to.deep.equal([\"Ryan\", \"Mark\"]);\n(0, _chai.expect)(math.friendOrFoe([\"Ryan\", \"Jimmy\", \"123\", \"4\", \"Cool Man\"])).to.deep.equal([\"Ryan\"]);\n(0, _chai.expect)(math.friendOrFoe([\"Jimm\", \"Cari\", \"aret\", \"truehdnviegkwgvke\", \"sixtyiscooooool\"])).to.deep.equal([\"Jimm\", \"Cari\", \"aret\"]);\n(0, _chai.expect)(math.friendOrFoe([\"Love\", \"Your\", \"Face\", \"1\"])).to.deep.equal([\"Love\", \"Your\", \"Face\"]);",
            "err": {},
            "isRoot": false,
            "uuid": "988f485e-a003-4c3b-8b38-d7d7eb9cdc24",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return the category of the member",
            "fullTitle": "Project Euler should return the category of the member",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)(math.openOrSenior([[45, 12], [55, 21], [19, -2], [104, 20]])).to.deep.equal(['Open', 'Senior', 'Open', 'Senior']);",
            "err": {},
            "isRoot": false,
            "uuid": "ba41faba-1010-4d17-a350-b3074951cce2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should give me the list of anagrams",
            "fullTitle": "Project Euler should give me the list of anagrams",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)(math.anagrams('abba', ['aabb', 'abcd', 'bbaa', 'dada'])).to.deep.equal(['aabb', 'bbaa']);",
            "err": {},
            "isRoot": false,
            "uuid": "507c13bc-9ec5-4701-849e-c79dd42ae5c7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should take you to a 10 min walk",
            "fullTitle": "Project Euler should take you to a 10 min walk",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)(math.isValidWalk(['n', 's', 'n', 's', 'n', 's', 'n', 's', 'n', 's'])).to.be.true;\n(0, _chai.expect)(!math.isValidWalk(['n', 's', 'n', 's', 'n', 's', 'n', 's', 'n', 's'])).to.be.false;",
            "err": {},
            "isRoot": false,
            "uuid": "fcbf71a5-87a9-4098-ad30-9023441dd9ec",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should give you the position of the different number from array of numbers",
            "fullTitle": "Project Euler should give you the position of the different number from array of numbers",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)(math.iqTest([2, 4, 7, 8, 10])).to.be.equal(2);\n(0, _chai.expect)(math.iqTest([1, 2, 1, 1])).to.be.equal(1);",
            "err": {},
            "isRoot": false,
            "uuid": "37cf5b9f-756c-4673-9a44-de14aa9cc9e1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should give you the position of the different number",
            "fullTitle": "Project Euler should give you the position of the different number",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _chai.expect)(math.iqTest2('2 4 7 8 10')).to.be.equal(3);\n(0, _chai.expect)(math.iqTest2('1 2 1 1')).to.be.equal(2);",
            "err": {},
            "isRoot": false,
            "uuid": "5d2f0c52-9df0-4d52-8844-5abf85339aa4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c955ac2d-0883-48f2-a8ea-83206c78f04f",
          "b339c464-905f-4caf-81ec-458963518164",
          "f1ea902e-5737-4d57-94a6-69c54f78c5d0",
          "7e07775b-2674-4102-92c6-83c7da19eadc",
          "041a9c8c-05b3-4b51-8a16-d58c652a07a2",
          "822bb736-49b7-421e-b806-609f64a56b5c",
          "77ed8fe4-e6a9-4004-8d4b-397b978e3342",
          "61914a38-27e6-447f-8364-73ef2ef1671e",
          "6705afb2-fc31-4b7b-ad6b-38b796e27346",
          "803613fc-b483-429e-8993-6d4eb0f07340",
          "988f485e-a003-4c3b-8b38-d7d7eb9cdc24",
          "ba41faba-1010-4d17-a350-b3074951cce2",
          "507c13bc-9ec5-4701-849e-c79dd42ae5c7",
          "fcbf71a5-87a9-4098-ad30-9023441dd9ec",
          "37cf5b9f-756c-4673-9a44-de14aa9cc9e1",
          "5d2f0c52-9df0-4d52-8844-5abf85339aa4"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 631,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}